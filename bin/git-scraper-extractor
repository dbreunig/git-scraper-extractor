  #!/usr/bin/env ruby
  
  #
  # Option Handling
  #
  def exit_with_help(with_help: true)
    puts "Usage: git-scraper-extractor /path/to/repo /path/to/output"
    exit
  end

  # Get args
  if ARGV.empty? || (ARGV[0] == "--help")
    exit_with_help
  end
  repo_path = ARGV.shift
  dest_path = ARGV.first ? ARGV.shift : "./"

  # Validate and/or create the output path
  unless File.directory?(dest_path)
    if File.exist?(dest_path)
      puts "The target output destination exists but is not a directory."
      exit_with_help()
    end
    FileUtils.mkdir_p(dest_path)
  end

  # Check for input validity
  unless File.directory?(repo_path)
    exit_with_help
  end

  #
  # Load the repo
  #
  repo = Rugged::Repository.discover(repo_path)
  head_ref = repo.head

  # Get the files that might be interesting
  interesting_files = []
  head_ref.target.tree.each_blob do |blob|
    interesting_files << blob[:name] if /.json|.csv|.tsv|.txt|.yaml/.match?(blob[:name])
  end

  # Ask the user which they want to extract
  all_option_string = "All of the above"
  prompt = TTY::Prompt.new
  selections = prompt.multi_select("What files would you like to extract? (Use space to select)", [interesting_files, all_option_string].flatten)
  selections = interesting_files if selections.include?(all_option_string)
  puts selections

  #
  # Extract the files
  #
  walker = Rugged::Walker.new(repo)
  walker.push(head_ref.target_id)
  walker.each do |commit|
    timestamp = commit.time.strftime("%FT%R")
    commit.tree.each_blob do |o|
      selections.each do |selected_filename|
        basename = File.basename(selected_filename)
        filetype = File.extname(selected_filename)
        if selected_filename == o[:name]
          obj = repo.lookup(o[:oid])
          filename = "#{basename}_#{timestamp}#{filetype}"
          File.open(File.join(dest_path, filename), "w") { |f| f.write(obj.read_raw.data) }
        end
      end
    end
  end